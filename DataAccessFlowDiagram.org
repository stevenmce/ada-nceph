#+TITLE:ADA-NCEPH Data Access Procedure 
#+AUTHOR: Ivan Hanigan and Steven McEachern
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
#+LATEX_HEADER: \usepackage{pdfpages}

#\clearpage
* COMMENT TODOLIST
** TODO Ivan send graphivis lowlevel versions to Steve by noon Fri (also NCEPH policy)
** TODO Steve review and comment
** TODO Ivan to revise lucidchart highlevel version on Mon-Tues
** TODO Ivan finalise and send to BDM by Wed-ish, CC Steve
* Introduction 
The aim of this document is to describe the procedure for accessing restricted health data through the proposed ANU Secure Data Hub, administered by the ADA and NCEPH.

The following descibes procedures and processes for three different agents in the system, with different roles:
- Users,
- User Administrators, and 
- Data Administrators.

The User and Data information that is used to control the actions of the system are stored in a Database at ANU referred to as the ANU-User-DB.
\newpage
* COMMENT graphviz code
#+name:flowdiagram
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r :exports none :eval no
  ###########################################################################
  # newnode: mortalityAccessFlowDiagram
  # REQUIRES THE DISENTANGLE REPO FROM https://github.com/ivanhanigan/disentangle
  # Clone into a tools directory, or change the following line
  source('~/tools/disentangle/src/newnode.r')
#+end_src
* Getting Access
The "Getting Access" procedure to help users apply for and gain access to mortality data is a set of formally defined steps that are designed to move the User through three general stages:
- Finding data: the initial state of searching for data.
- Requesting data: guiding the researcher through the process of (a) gaining Ethics Approval from a Human Research Ethics Committee, and (b) Project Level Approval from the Registrar of Births, Deaths and Marriages.
- Providing data: provision of a confidentialised (often aggregated) dataset in an appropriately secured manner such as access to remote secure servers or encrypted archives accessed on local disk media, with security determined by (a) the nature of the data and (b) any project management related criteria.

** COMMENT src
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r :exports none :eval no
  ###########################################################################
  # Getting access
  
  nodes <- newnode(name='Browse Catalogue',
                   inputs = 'Search for Data',
                   outputs = 'Request Access',
                   newgraph = T
                   )
  ## NEEDS ETHICS COMMITTEE PROCESS HERE
  
  nodes <- newnode(name= 'Get Ethics Committee Approval',
                  inputs='Request Access',
                   outputs = 'Ethics Committee Approves Project')
  
  nodes <- newnode(name= 'Add Study Description in ANU-User-DB',
                  inputs= 'Ethics Committee Approves Project'
                   )
  
  nodes <- newnode(name = 'Get BDM Committee Approval',
                   inputs = 'Add Study Description in ANU-User-DB'
                   )
  ## INSERT BDM APPROVAL PROCESS HERE
  
  nodes <- newnode(name='Approve Access',
                   inputs = 'Get BDM Committee Approval'
  
                   )
  
  nodes <- newnode(name='Deny Access',
                   inputs = 'Get BDM Committee Approval'
  
  )
  
  
  
  ###########################################################################
  # Provide data
  # nodes <- newnode(name='Add to Study Description in ANU-User-DB',
  #                  inputs='Request Access',
  #                  outputs= 'Review Application',
  #
  #                  )
  
  # notify approval
  
  nodes <- newnode(name='Notify User of Approval',
                   inputs='Approve Access',
                   outputs='Add Access Record in ANU-User-DB',
                   )
  
  # or record why not
  
  nodes <- newnode(name='Notify User of Non-approval',
                   inputs='Deny Access',
                   outputs='Note Reason in Study Description in ANU-User-DB',
                   )
  
  
  
  nodes <- newnode(name='Give access to Restricted Server', newgraph = F,
                   inputs = 'Add Access Record in ANU-User-DB'
                   )
  
  
  nodes <- newnode(name='Extract to Restricted Server', newgraph = F,
                   inputs = 'Give access to Restricted Server'
                   )
  
  nodes <- newnode(name= 'Store data extract in appropriate location', newgraph = F,
                   inputs = c('Extract to Restricted Server'),
                   outputs = c('Low Risk Data')
                   )
  
  nodes <- newnode(name = 'CSV',
                   inputs = 'Low Risk Data')
  
  nodes <- newnode(name = 'High Risk Data', outputs =
                   c('Database schema', 'Rstudio user workspace'),
                   inputs = 'Store data extract in appropriate location'
                   )
  
  nodes <- newnode(name= 'Add File Record to ANU-User-DB', newgraph = F,
                   inputs = c('CSV', 'Database schema', 'Rstudio user workspace'),
  
  
                   outputs = c('Notify User of Access')
  )
  
  nodes <- newnode(name = 'Modify file and access records in ANU-User-DB',
                   inputs = 'Notify User of Access')
  
#+end_src  
** COMMENT add colour
#+name:add-colour
#+begin_src R :session *shell* :tangle DataAccessFlowDiagram.r :exports none :eval no
  ###########################################################################
  # newnode: test-colour
  attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
  plot(nodes, attrs = attrs)
  nNodes <- length(nodes(nodes))
  nA <- list()
  nA$fillcolor <- rep('grey', nNodes)
  nA$shape <- rep("ellipse", nNodes)
  nA <- lapply(nA, function(x) { names(x) <- nodes(nodes); x})
  #nA
  #plot(nodes, nodeAttrs=nA, attrs = attrs)
  nodes(nodes)
  # USER
  nA$fillcolor[nodes(nodes)[1:4]] <- 'lightblue'
  # USER ADMIN
  nA$fillcolor[nodes(nodes)[c(6:7,10:13, 22:24)]] <- 'grey'
  # DATA ADMIN
  nA$fillcolor[nodes(nodes)[c(14:16, 18, 20, 21)]] <- 'lightyellow'
  # DECISIONS
  dec <- c(5,8:9, 17,19)
  nA$fillcolor[nodes(nodes)[dec]] <- 'red'
  nA$shape[nodes(nodes)[dec]] <- 'box'
  
  plot(nodes, nodeAttrs=nA, attrs = attrs)
  legend('topright', legend = c('User','User Admin', 'Data Admin','Decision'),
         pch = cc1,1,pch=i, axes=F, cex = 3, col = 'blue', bg = 'yellow')
         col=c('lightblue','grey', 'lightyellow', 'red')
         )
  
#+end_src

** COMMENT plot nodes
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r  :exports none :eval no   
    
  dev.copy2pdf(file='DataAccessFlowDiagram-GettingAccess.pdf')
  dev.off()
    
#+end_src

** Flow Chart of Steps to Get Access
*** TODO change this to the lucidchart version
#\includepdf{DataAccessFlowDiagram-GettingAccess.pdf}
\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{DataAccessFlowDiagram-GettingAccess.pdf}
\caption{Flow Diagram of Getting Access}
\label{fig:DataAccessFlowDiagram-GettingAccess}
\end{figure}
\clearpage

* Managing Access
Procedures for managing access are intended to maintain information on the current state of projects using the mortality data, and to report any changes in situation to the State Registries. The User Administrator is responsible for conduct of the "Managing Access" procedures.

The process is initiated by running a query on the ANU-User-DB to make a list of all Projects and Users, and then each Project is sent a reminder to report any changes in Project Status (sent annually to coincide with a similar reminder sent by the ANU Human Research Ethics Committee). The purpose of these reminders is to ensure that Project management plans continue to consider data security as a primary concern, even during long multi-year projects where many project management and staffing issues inevitably arise.

Once a response is received, the User Administrator then enters the relevant information into the ANU-User-DB, and if the project has been concluded will then iniitate the final "Ending Access" process.

** COMMENT src
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r :exports none :eval no 
  ###########################################################################
  # newnode Manage Access
  
  nodes <- newnode(name= 'List Current Users',
                   inputs = c('Modify file access record in ANU-User-DB'),
                   outputs = c('Email Users'),
                   newgraph = T
                   )
  
  nodes <- newnode(name= 'Receive Reminder',
                   inputs = c('Email Users')
  
                   )
  
  nodes <- newnode(name= 'Report Status',
                   inputs = c('Receive Reminder'),
                   outputs = c('No Change', 'Changed Status')
                   )
  
  
  nodes <- newnode(name= 'Input Response',
                   inputs = c('No Change', 'Changed Status'),
                   outputs = c('Write Report',
                   'Modify file access record in ANU-User-DB', 'Review Report'))
#+end_src
** COMMENT plot nodes
#+name:plotnodes
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r :exports none :eval no
################################################################
# name:plotnodes
    dev.copy2pdf(file='DataAccessFlowDiagram-ManagingAccess.pdf')
    dev.off()

#+end_src

** Flow Chart of Steps to Manage Access
*** TODO change this to the lucidchart version
\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{DataAccessFlowDiagram-ManagingAccess.pdf}
\caption{Flow Diagram of Managing Access}
\label{fig:DataAccessFlowDiagram-ManagingAccess}
\end{figure}
\clearpage


* Ending Access
The procedure for ending access aims to ensure that data are both securely and sustainably stored.  It is very important that files used for authorised projects are never re-used in un-authorised projects, but that future researchers may have the opportunity to create an authorised project and potentially replicate historical analyses.  This is an important part of reproducible research and the robust practice of scientific enquiry.

** COMMENT src
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r :exports none :eval no   
  ###########################################################################
  # newnode End Access
  nodes <- newnode(name= 'Query Registered End Dates',
                   inputs = c('Start Periodic Review'),
                   outputs = c('Send Prompt to Users'),
                   newgraph = T)
  
  nodes <- newnode(name= 'User Receives Prompt',
                   inputs = c('Send Prompt to Users')
                   )
  
  nodes <- newnode(name= 'User Reviews Status',
                   inputs = c('User Receives Prompt'),
                   outputs = c('Project Continuing', 'Project Concluded')
                   )
  
  nodes <- newnode(name= 'Request Extension',
                   inputs = c('Project Continuing'),
                   outputs = 'Extension of Access Implemented'
                   )
  
  nodes <- newnode(name= 'Low Risk Data',
                   inputs = c('Project Concluded')
  
                   )
  
  nodes <- newnode(name= 'High Risk Data',
                   inputs = c('Project Concluded')
  
                   )
  
  nodes <- newnode(name = 'User Creates Data Archives Package',
                   inputs = 'Low Risk Data'
                   )
  
  nodes <- newnode(name = 'Data Admin Creates Data Archives Package',
                   inputs = 'High Risk Data'
                   )
  
  nodes <- newnode(name = 'Data Admin Stores Data',
                   inputs = 'Data Admin Creates Data Archives Package',
                   outputs = c('Notify User Admin of Storage',
                     'Notify User of Storage',
                   'Notify Registries of Project Conclusion')
                   )
  
  nodes <- newnode(name= 'Data Archives Receives Data',
                   inputs = c('User Creates Data Archives Package')
                   )
  
  nodes <- newnode(name= 'Store Archive Data',
                   inputs = 'Data Archives Receives Data',
                   outputs = c('Notify User of Archive Storage',
                   'Notify Registries of Project Conclusion')
                   )
  
  nodes <- newnode(name= 'User Data Archiving',
                   inputs = 'Notify User of Archive Storage',
                   outputs = c('User Destroys Data',
                   'User Stores Data and Informs User Admin of Security')
                   )
  
  nodes <-  newnode(name = 'User Admin Records Status in ANU-User-DB',
                    inputs =
                    'User Stores Data and Informs User Admin of Security'
                    )
  
#+end_src
** COMMENT plot nodes
#+name:plotnodes
#+begin_src R :session *R* :tangle DataAccessFlowDiagram.r :exports none :eval no
  ################################################################
  # name:plotnodes
      dev.copy2pdf(file='DataAccessFlowDiagram-EndAccess.pdf')
      dev.off()
  
#+end_src

** Flow Chart for Ending Access
*** TODO change this to the lucidchart version

\begin{figure}[!h]
\centering
\includegraphics[width=\textwidth]{DataAccessFlowDiagram-EndAccess.pdf}
\caption{Flow Diagram for Ending Access}
\label{fig:DataAccessFlowDiagram-EndAccess}
\end{figure}
\clearpage

* COMMENT Visualise the Data Access Process

** COMMENT plot nodes
#+begin_src R :session *R* :tangle no :exports none :eval no   
  
  source('DataAccessFlowDiagram.r')
  
  # NB this needs to be run with edits to the above codes 
  #dev.copy2pdf(file='DataAccessFlowDiagram-AllNodes.pdf')
  #dev.off()
  
#+end_src
